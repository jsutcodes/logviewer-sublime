%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: irslog
file_extensions: [.log]
scope: source.log
first_line_match: '([0-9]{1,2}\s?\w{3}\s?[0-9]{4}\s?(?:[0-9]{2}\:){2}[0-9]{2}\.[0-9]{3})' # see if it matches date format

# following pattern"
# <DATETIME> <Proccess[THREAD]> <LOG_LEVEL> <CLASS> \- <MESSAGE>
#
# 15 Feb 2019 08:40:52.853 HPRSMain[startWindowsService] INFO  c.h.u.c.ConfigurationData - Property value 'uca.config.home'='C:\ProgramData\HP\RS\CONFIG\'

version: '1.1'
# IRS Log Features:
# 1. color proccesses so that its easier to tell when certain services never started etc
# 2. custom scope for log files. (i.e. use numeric.date.log instead of comment.log)
# version '1.0'
#   1. highlight ERROR, DEBUG, WARN with colored output (INFO is default text color)
#   2. grey out "#SecEvt" line as its just ui actions
#   3. highlight any stacktrace errors with red text
#       a. highlight any javaclassfilewith number following (i.e. "thisclass.java:774")
#       b. highlight any expection name, (ex: java.com.Exeption: Can't find log message)


# When a match is found the content is consumed.
variables: # Must use the {{variablename}} to access
  datetime: '([0-9]{1,2}\s?\w{3}\s?[0-9]{4}\s?(?:[0-9]{2}\:){2}[0-9]{2}\.[0-9]{3})' # group 1
  proccess: '(\w*)(?:\[([^\]]*)\])' # group2 & group3
  # thread: in group above
  loglevel: '\b(INFO|WARN|DEBUG|ERROR)\b'
  class: '((?:\w*\.)*)(\w*)' # think this is the fix
  message: '(?:\-\s*(.*))'

  secevt: '(?:\-\s*(\#SecEvt.*))'
  exception: '\b\w*Exception:\s*.*\b\n'


contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: javafile

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: logmessage
    - include: nonlogmessage


  logmessage:
    - match: '{{datetime}}'
      scope: comment.line.log
    - include:  proccess
    - match: '{{proccess}}'
      captures:
        1: custom.jettyserver.log
        2: keyword.control.log
      push: loglevel
    - include: nonlogmessage

  nonlogmessage:
    - include: stacktrace

  proccess:
    # - include: javafile
    - match: '\b(JettyServer)\b'
      scope: custom.jettyserver.log
    - match: '\b(HPRSMain)\b'
      scope: custom.hprsmain.log
    - match: '\b(HPRSExecutionManager)\b'
      scope: custom.hprsexectionmanager.log
    - match: '\b(IntegrationRunner)\b'
      scope: custom.integrationrunner.log
    - match: '\b(CLIInterpreter)\b'
      scope: custom.cliinterpreter.log
    - match: '\b(DESTAController)\b'
      scope: custom.destacontroller.log
      # push: loglevel

  loglevel:
    # loglevel are info, warn, debug, error and trace
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(INFO)\b'
      scope: text.log
      set: INFO

    - match: '\b(WARN)\b'
      scope: variable.parameter.log
      set: WARN

    - match: '\b(DEBUG)\b'
      scope: entity.name.constant.log
      set: DEBUG

    - match: '\b(ERROR)\b'
      scope: keyword.control.log
      set: ERROR

  INFO:
    - match: '{{class}}'
      captures:
        1: comment.log
        2: text.log
    - include: secevt
    - match: '{{message}}'
      scope: text.log
    - match: \n
      pop: true

  DEBUG:
    - match: '{{class}}'
      captures:
        1: comment.log
        2: entity.name.constant.log
    - include: secevt
    - match: '{{message}}'
      scope: entity.name.constant.log
    - match: \n
      pop: true

  WARN:
    - match: '{{class}}'
      captures:
        1: comment.log
        2: variable.parameter.log
    - include: secevt
    - match: '{{message}}'
      scope: variable.parameter.log
    - match: \n
      pop: true

  ERROR:
    - match: '{{class}}'
      captures:
        1: comment.log
        2: keyword.control.log
    - include: secevt
    - match: '{{message}}'
      scope: keyword.control.log
    - match: \n
      pop: true

  stacktrace: # at com.hp.uca.hprsmain.HPRSMain.createCookie(HPRSMain.java:1084) [hprsMain.jar:na]
    - meta_scope: keyword.control.log
    - include: exception
    - match: '(\s+at [^\()]++)+\('
      scope: keyword.control.log
    - include: javafile
    - match: '[^\)]'
      scope: keyword.control.log
    - match: '\).++'
      scope: keyword.control.log
    - match: '\s\.{3}.++'
      scope: keyword.control.log

    # - match: '^.+' # works for now. doesnt allow highlighting in stack traces
    #   scope: keyword.control.log


    # - include: exception
    # - match: '((?:\s*\w*\.*)*\({1}(\w*\.java\:\d+)\)\s*\[(\w*\.+\w*\:[\w|\d]*)\])'
    #   captures:
    #     1: keyword.control.log
    #     2: constant.numeric.log
    #     3: constant.numeric.log

  javafile: # this is capturing but not in the stacktrace
    - match: '(\w+\.java\:\d+)'
      scope: constant.numeric.log

###################################
# UI Information from IRS log file
###################################
  secevt:
    - match: '{{secevt}}'
      scope: comment.log

################################
# Special Regex patterns:
################################
  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.log
  exception:
    - match: '{{exception}}'
      scope: constant.numeric.log
